<ts:token xmlns:ethereum="urn:ethereum:constantinople" xmlns:ts="http://tokenscript.org/2024/01/tokenscript" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="SnakeGame" xsi:schemaLocation="http://tokenscript.org/2024/01/tokenscript https://www.tokenscript.org/schemas/2024-01/tokenscript.xsd">

  <ts:label>
    <ts:plurals xml:lang="en">
      <ts:string quantity="one">SnakeGame Token</ts:string>
      <ts:string quantity="other">SnakeGame Tokens</ts:string>
    </ts:plurals>
  </ts:label>

  <ts:contract interface="erc721" name="SnakeGameAccount">
    <ts:address network="84532">0x584649858943ea3e5ea420cb00a44b6ac85acc28</ts:address>
  </ts:contract>

  <ts:origins>
    <ts:ethereum contract="SnakeGameAccount"/>
  </ts:origins>

  <ts:cards>

    <ts:card name="playSnake" type="onboarding">
      <ts:label>
        <ts:string xml:lang="en">Play Snake Game</ts:string>
      </ts:label>
      <ts:attribute name="newScore">
        <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax></ts:type>
        <ts:label>
          <ts:string xml:lang="en">New Score</ts:string>
        </ts:label>
        <ts:origins>
          <ts:user-entry as="uint"/>
        </ts:origins>
      </ts:attribute>
      <ts:transaction>
        <ethereum:transaction contract="SnakeGameAccount" function="updateHighScore">
          <ts:data>
            <ts:uint256 ref="tokenId"/>
            <ts:uint256 ref="newScore"/>
          </ts:data>
        </ethereum:transaction>
      </ts:transaction>
      <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
        
      <base href="https://WebSimEngine/snake-game/"/>
	<title>Snake Game - Meme Coin Edition | 贪吃蛇游戏 - 迷因币版</title>
	<style>/*&lt;![CDATA[*/ 

        body {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
            font-family: Arial, sans-serif;
        }
        #game-container {
            position: relative;
            width: 400px;
            height: 400px;
            background-color: #fff;
            border: 2px solid #333;
        }
        #game-board {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        #score {
            position: absolute;
            top: 10px;
            left: 10px;
            font-size: 20px;
            font-weight: bold;
        }
        .snake {
            position: absolute;
            width: 20px;
            height: 20px;
            background-color: #4CAF50;
            border: 1px solid #45a049;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 14px;
        }
        .food {
            position: absolute;
            width: 20px;
            height: 20px;
            background-color: #FFD700;
            border: 1px solid #FFA500;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 14px;
        }
        #instructions {
            position: absolute;
            bottom: 10px;
            left: 10px;
            font-size: 14px;
            color: #666;
            text-align: center;
            width: 100%;
        }
        #start-button {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 10px 20px;
            font-size: 18px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        #start-button:hover {
            background-color: #45a049;
        }
        #controls {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin-top: 20px;
        }
        .control-button {
            width: 60px;
            height: 60px;
            font-size: 24px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .control-button:hover {
            background-color: #45a049;
        }
        #up-button { grid-column: 2; }
        #left-button { grid-column: 1; grid-row: 2; }
        #right-button { grid-column: 3; grid-row: 2; }
        #down-button { grid-column: 2; grid-row: 3; }
        #language-toggle {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 5px 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        #language-toggle:hover {
            background-color: #45a049;
        }
	
 /*//]]&gt;*/</style>

<div id="game-container">
	<div id="game-board"></div>
	<div id="score">Score: 0 | 分数: 0</div>
	<div id="instructions">Use arrow keys or on-screen buttons to control the snake<br/>使用方向键或屏幕按钮控制蛇移动</div>
	<button id="start-button">Start Game | 开始游戏</button>
	<button id="language-toggle">EN/中文</button>
</div>
<div id="controls">
	<button id="up-button" class="control-button">↑</button>
	<button id="left-button" class="control-button">←</button>
	<button id="right-button" class="control-button">→</button>
	<button id="down-button" class="control-button">↓</button>
</div>

<script>//&lt;![CDATA[

	const boardSize = 20;
	const cellSize = 20;
	let snake = [{x: 10, y: 10, coin: ''}];
	let food = {};
	let direction = 'right';
	let score = 0;
	let gameLoop;
	let gameStarted = false;
	let language = 'en'; // Default language

	const memeCoins = ['DOGE', 'SHIB', 'PEPE', 'SAFEMOON', 'BABYDOGE', 'FLOKI', 'ELON', 'SAMO', 'CATE', 'HOGE'];

	const translations = {
		en: {
			startGame: 'Start Game',
			restartGame: 'Restart Game',
			score: 'Score',
			gameOver: 'Game Over! Your score is:',
			collectedCoins: 'Collected meme coins:',
			instructions: 'Use arrow keys or on-screen buttons to control the snake'
		},
		zh: {
			startGame: '开始游戏',
			restartGame: '重新开始',
			score: '分数',
			gameOver: '游戏结束！你的得分是:',
			collectedCoins: '你收集的迷因币:',
			instructions: '使用方向键或屏幕按钮控制蛇移动'
		}
	};

	function init() {
		document.getElementById('start-button').addEventListener('click', startGame);
		document.addEventListener('keydown', changeDirection);

		// Add touch controls
		document.getElementById('up-button').addEventListener('click', () =&gt; changeDirectionTouch('up'));
		document.getElementById('down-button').addEventListener('click', () =&gt; changeDirectionTouch('down'));
		document.getElementById('left-button').addEventListener('click', () =&gt; changeDirectionTouch('left'));
		document.getElementById('right-button').addEventListener('click', () =&gt; changeDirectionTouch('right'));

		// Add language toggle
		document.getElementById('language-toggle').addEventListener('click', toggleLanguage);

		updateText();
	}

	function startGame() {
		if (gameStarted) return;
		gameStarted = true;
		document.getElementById('start-button').style.display = 'none';
		snake = [{x: 10, y: 10, coin: ''}];
		direction = 'right';
		score = 0;
		updateScore();
		createFood();
		gameLoop = setInterval(update, 150);
	}

	function update() {
		moveSnake();
		if (checkCollision()) {
			gameOver();
			return;
		}
		if (snake[0].x === food.x &amp;&amp; snake[0].y === food.y) {
			eatFood();
		}
		draw();
	}

	function moveSnake() {
		const head = {...snake[0], coin: snake[0].coin};
		switch(direction) {
			case 'up': head.y--; break;
			case 'down': head.y++; break;
			case 'left': head.x--; break;
			case 'right': head.x++; break;
		}
		snake.unshift(head);
		if (snake[0].x !== food.x || snake[0].y !== food.y) {
			snake.pop();
		}
	}

	function checkCollision() {
		const head = snake[0];
		return (
			head.x &lt; 0 || head.x &gt;= boardSize ||
			head.y &lt; 0 || head.y &gt;= boardSize ||
			snake.slice(1).some(segment =&gt; segment.x === head.x &amp;&amp; segment.y === head.y)
		);
	}

	function createFood() {
		food = {
			x: Math.floor(Math.random() * boardSize),
			y: Math.floor(Math.random() * boardSize),
			coin: memeCoins[Math.floor(Math.random() * memeCoins.length)]
		};
	}

	function eatFood() {
		score += 10;
		updateScore();
		snake[0].coin = food.coin;
		createFood();
	}

	function draw() {
		const board = document.getElementById('game-board');
		board.innerHTML = '';
		snake.forEach((segment, index) =&gt; {
			const snakeElement = document.createElement('div');
			snakeElement.className = 'snake';
			snakeElement.style.left = `${segment.x * cellSize}px`;
			snakeElement.style.top = `${segment.y * cellSize}px`;
			if (index === 0) {
				snakeElement.style.backgroundColor = '#2E7D32';
			}
			snakeElement.textContent = segment.coin;
			board.appendChild(snakeElement);
		});
		const foodElement = document.createElement('div');
		foodElement.className = 'food';
		foodElement.style.left = `${food.x * cellSize}px`;
		foodElement.style.top = `${food.y * cellSize}px`;
		foodElement.textContent = food.coin;
		board.appendChild(foodElement);
	}

	function changeDirection(event) {
		if (!gameStarted) return;
		const keyMap = {
			ArrowUp: 'up',
			ArrowDown: 'down',
			ArrowLeft: 'left',
			ArrowRight: 'right'
		};
		const newDirection = keyMap[event.key];
		if (newDirection) {
			changeDirectionTouch(newDirection);
		}
	}

	function changeDirectionTouch(newDirection) {
		if (!gameStarted) return;
		const opposites = {up: 'down', down: 'up', left: 'right', right: 'left'};
		if (newDirection !== opposites[direction]) {
			direction = newDirection;
		}
	}

	function gameOver() {
		clearInterval(gameLoop);
		gameStarted = false;
		const t = translations[language];
		alert(`${t.gameOver} ${score}\n${t.collectedCoins} ${snake.map(segment =&gt; segment.coin).filter(coin =&gt; coin).join(', ')}`);
		document.getElementById('start-button').style.display = 'block';
		document.getElementById('start-button').textContent = t.restartGame;
	}

	function toggleLanguage() {
		language = language === 'en' ? 'zh' : 'en';
		updateText();
	}

	function updateText() {
		const t = translations[language];
		document.getElementById('start-button').textContent = gameStarted ? t.restartGame : t.startGame;
		document.getElementById('instructions').textContent = t.instructions;
		updateScore();
	}

	function updateScore() {
		const t = translations[language];
		document.getElementById('score').textContent = `${t.score}: ${score}`;
	}

	init();

//]]&gt;</script>
</ts:view>
    </ts:card>
  </ts:cards>

  <ts:attribute name="highScore">
    <ts:type><ts:syntax>uint256</ts:syntax></ts:type>
    <ts:label>
      <ts:string xml:lang="en">High Score</ts:string>
    </ts:label>
    <ts:origins>
      <ethereum:call as="uint" function="highScore">
        <ts:data>
          <ts:uint256 ref="tokenId"/>
        </ts:data>
      </ethereum:call>
    </ts:origins>
  </ts:attribute>
</ts:token>
